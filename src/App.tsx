import { LoadScript } from '@react-google-maps/api';
import * as React from 'react';
import { useCallback, useRef, useState, useEffect } from 'react';
import Map from './components/Map';
import SearchBar from './components/SearchBar';
import PlaceDetailPanel from './components/PlaceDetailPanel';
import TabNavigationWrapper from './components/TabNavigationWrapper';
import { TabKey } from './components/TabNavigation';

import TravelTimeControls from './components/TravelTimeControls';
import SelectionBanner from './components/SelectionBanner';
import TestPlacesButton from './components/TestPlacesButton';
import RouteSearchPanel from './components/RouteSearchPanel';
import Tutorial from './components/Tutorial';
import KeyboardShortcuts from './components/KeyboardShortcuts';
import { useRouteSearchStore } from './store/routeSearchStore';
import { useDeviceDetect } from './hooks/useDeviceDetect';
import { useGoogleMaps } from './hooks/useGoogleMaps';
import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';
import { useSelectedPlaceStore } from './store/placeStore';
import { useTravelTimeStore } from './store/travelTimeStore';
import PlaceList from './components/PlaceList';
import { loadPlanFromUrl } from './utils/shareUtils';
import { usePlacesStore } from './store/placesStore';
import { useLabelsStore } from './store/labelsStore';
import PlanNameDisplay from './components/PlanNameDisplay';
import { usePlanStore } from './store/planStore';
import { getActivePlan, createEmptyPlan, setActivePlan, loadActivePlanHybrid } from './services/storageService';
import { useAuth } from './hooks/useAuth';
import { useAutoSave } from './hooks/useAutoSave';
import AuthButton from './components/AuthButton';
import SyncStatusIndicator from './components/SyncStatusIndicator';
import SyncTestButton from './components/SyncTestButton';
import SyncDebugButton from './components/SyncDebugButton';
import { syncDebugUtils } from './utils/syncDebugUtils';
import { TravelPlan } from './types';

// LoadScriptÁî®„ÅÆ„É©„Ç§„Éñ„É©„É™„ÇíÂÆöÊï∞„Å®„Åó„Å¶ÂÆöÁæ©
const LIBRARIES: ('places')[] = ['places'];

function App() {
  const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY as string;
  
  console.log('App loaded, API Key:', apiKey ? 'Set' : 'Not set');
  
  if (!apiKey) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-lg text-center max-w-md">
          <h1 className="text-xl font-bold text-red-600 mb-4">Ë®≠ÂÆö„Ç®„É©„Éº</h1>
          <p className="text-gray-700 mb-4">
            Google Maps API „Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ
          </p>
          <p className="text-sm text-gray-600">
            .env „Éï„Ç°„Ç§„É´„Å´ VITE_GOOGLE_MAPS_API_KEY „ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          </p>
        </div>
      </div>
    );
  }

  const { isDesktop } = useDeviceDetect();
  const { panTo, zoomIn, zoomOut } = useGoogleMaps();

  const searchRef = useRef<HTMLInputElement>(null);
  
  // „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„Éª„Éò„É´„ÉóÈñ¢ÈÄ£„ÅÆstate
  const [showTutorial, setShowTutorial] = useState(false);
  const [showKeyboardShortcuts, setShowKeyboardShortcuts] = useState(false);

  const focusSearch = useCallback(() => {
    searchRef.current?.focus();
  }, []);

  const clearSearch = useCallback(() => {
    if (searchRef.current) {
      const input = searchRef.current as HTMLInputElement;
      input.value = '';
      input.blur();
    }
  }, []);

  const showHelp = useCallback(() => {
    setShowKeyboardShortcuts(true);
  }, []);

  useKeyboardShortcuts({
    isDesktop,
    focusSearch,
    clearSearch,
    zoomIn,
    zoomOut,
    showHelp,
  });

  // ÂàùÂõûËµ∑ÂãïÊôÇ„ÅÆ„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´Ë°®Á§∫
  useEffect(() => {
    const hasSeenTutorial = localStorage.getItem('travel-app-tutorial-seen');
    if (!hasSeenTutorial) {
      // Â∞ë„ÅóÈÅÖ„Çâ„Åõ„Å¶„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„ÇíË°®Á§∫
      const timer = setTimeout(() => {
        setShowTutorial(true);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, []);

  const handleTutorialClose = useCallback(() => {
    setShowTutorial(false);
    localStorage.setItem('travel-app-tutorial-seen', 'true');
  }, []);

  const handlePlaceSelected = (lat: number, lng: number) => {
    panTo(lat, lng, 17);
  };

  const placeOpen = !!useSelectedPlaceStore((s) => s.place);

  // Tab navigation state
  const [activeTab, setActiveTab] = React.useState<TabKey>('map');
  
  // Label mode state
  const [labelMode, setLabelMode] = React.useState(false);

  // „É©„Éô„É´„É¢„Éº„Éâ„ÅÆ„Éà„Ç∞„É´Ê©üËÉΩ
  const handleLabelModeToggle = useCallback(() => {
    setLabelMode(prev => !prev);
  }, []);

  // ESC„Ç≠„Éº„Åß„É©„Éô„É´„É¢„Éº„Éâ„ÇíÁµÇ‰∫Ü
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && labelMode) {
        setLabelMode(false);
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [labelMode]);
  
  // Route search store
  const { 
    isRouteSearchOpen, 
    selectedOrigin, 
    selectedDestination,
    closeRouteSearch 
  } = useRouteSearchStore();

  // Enable/disable travel-time store based on active tab
  React.useEffect(() => {
    const store = useTravelTimeStore.getState();
    store.setEnabled(activeTab === 'travelTime');
    
    // ÁßªÂãïÊôÇÈñì„Çø„Éñ„Åã„ÇâÈõ¢„Çå„ÇãÊôÇ„ÅØÊòéÁ§∫ÁöÑ„Å´„ÇØ„É™„Ç¢
    if (activeTab !== 'travelTime') {
      store.clearAll();
    }
  }, [activeTab]);

  // Ë™çË®ºÁä∂ÊÖã„Å®ÂàùÊúüÂåñÂÆå‰∫Ü„Éï„É©„Ç∞„ÇíÂèñÂæó
  const { user, isInitializing } = useAuth();
  const planId = usePlanStore((s) => s.plan?.id);
  
  // Ëá™Âãï‰øùÂ≠ò„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíÁÆ°ÁêÜ
  const lastSavedTimestampRef = useRef<number>(0);
  
  // ‰øùÂ≠ò„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
  const updateLastSavedTimestamp = useCallback((timestamp: number) => {
    lastSavedTimestampRef.current = timestamp;
  }, []);

  // Ëá™Âãï‰øùÂ≠ò„Éï„ÉÉ„ÇØ„Çí‰ΩøÁî®
  const plan = usePlanStore((s) => s.plan);
  const { setIsRemoteUpdateInProgress, saveImmediately, saveImmediatelyCloud, lastCloudSaveTimestamp } = useAutoSave(plan, updateLastSavedTimestamp);

  // ÂÄôË£úÂú∞ËøΩÂä†ÊôÇ„ÅÆÂç≥Â∫ßÂêåÊúü„ÇíË®≠ÂÆö
  React.useEffect(() => {
    const { setOnPlaceAdded } = usePlacesStore.getState();
    
    setOnPlaceAdded((newPlace) => {
      if (import.meta.env.DEV) {
        console.log('üöÄ ÂÄôË£úÂú∞ËøΩÂä†Ê§úÁü•„ÄÅÂç≥Â∫ßÂêåÊúüÈñãÂßã:', newPlace.name);
      }
      
      const currentPlan = usePlanStore.getState().plan;
      if (currentPlan) {
        const planToSave: TravelPlan = {
          ...currentPlan,
          places: [...currentPlan.places, newPlace],
          updatedAt: new Date(),
        };
        usePlanStore.getState().setPlan(planToSave);
        saveImmediately(planToSave);
        saveImmediatelyCloud(planToSave);
      }
      
      // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíË®òÈå≤
      syncDebugUtils.log('save', {
        type: 'immediate_sync',
        reason: 'place_added',
        placeName: newPlace.name,
        placeId: newPlace.id,
        timestamp: Date.now()
      });
    });
  }, [plan, saveImmediately, saveImmediatelyCloud]);

  // ÂÄôË£úÂú∞ÂâäÈô§ÊôÇ„ÅÆÂç≥Â∫ßÂêåÊúü„ÇíË®≠ÂÆö
  React.useEffect(() => {
    const { setOnPlaceDeleted } = usePlacesStore.getState();
    
    setOnPlaceDeleted((updatedPlaces) => {
      if (import.meta.env.DEV) {
        console.log('üóëÔ∏è ÂÄôË£úÂú∞ÂâäÈô§Ê§úÁü•„ÄÅÂç≥Â∫ßÂêåÊúüÈñãÂßã:');
      }
      
      // ÊúÄÊñ∞„ÅÆ„Éó„É©„É≥„ÇíÂèñÂæó„Åó„ÄÅplaces„ÇíÊõ¥Êñ∞„Åó„Å¶‰øùÂ≠ò
      const currentPlan = usePlanStore.getState().plan;
      if (currentPlan) {
        const planToSave: TravelPlan = {
          ...currentPlan,
          places: updatedPlaces,
          updatedAt: new Date(),
        };
        usePlanStore.getState().setPlan(planToSave);
        saveImmediately(planToSave);
        saveImmediatelyCloud(planToSave);
      }
      
      // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíË®òÈå≤
      syncDebugUtils.log('save', {
        type: 'immediate_sync',
        reason: 'place_deleted',
        timestamp: Date.now()
      });
    });
  }, [plan, saveImmediately, saveImmediatelyCloud]);

  // „É©„Éô„É´ËøΩÂä†ÊôÇ„ÅÆ„É≠„Éº„Ç´„É´Áä∂ÊÖãÊõ¥Êñ∞
  React.useEffect(() => {
    const { setOnLabelAdded } = useLabelsStore.getState();
    
    setOnLabelAdded((newLabel) => {
      if (import.meta.env.DEV) {
        console.log('üìù „É©„Éô„É´ËøΩÂä†Ê§úÁü•Ôºà„É≠„Éº„Ç´„É´„ÅÆ„ÅøÔºâ:', newLabel.text);
      }
      
      const currentPlan = usePlanStore.getState().plan;
      if (currentPlan) {
        const planToSave: TravelPlan = {
          ...currentPlan,
          labels: [...currentPlan.labels, newLabel],
          updatedAt: new Date(),
        };
        usePlanStore.getState().setPlan(planToSave);
        // saveImmediately(planToSave); // ÂàùÂõû‰øùÂ≠ò„ÅØ„Åó„Å™„ÅÑ
      }
    });
  }, []);

  // „É©„Éô„É´Êõ¥Êñ∞ÊôÇ„ÅÆÂç≥Â∫ßÂêåÊúü„ÇíË®≠ÂÆö
  React.useEffect(() => {
    const { setOnLabelUpdated } = useLabelsStore.getState();

    setOnLabelUpdated((updatedLabel, updatedLabels) => {
      if (import.meta.env.DEV) {
        console.log('üìù „É©„Éô„É´Êõ¥Êñ∞Ê§úÁü•„ÄÅÂêåÊúüÈñãÂßã:', updatedLabel);
      }

      const currentPlan = usePlanStore.getState().plan;
      if (currentPlan) {
        const planToSave: TravelPlan = {
          ...currentPlan,
          labels: updatedLabels,
          updatedAt: new Date(),
        };
        usePlanStore.getState().setPlan(planToSave);
        
        // 'synced' „Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆ„É©„Éô„É´„ÅÆ„Åø„ÇØ„É©„Ç¶„ÉâÂêåÊúü
        if (updatedLabel.status === 'synced') {
          saveImmediately(planToSave);
          saveImmediatelyCloud(planToSave);
        }
      }
    });
  }, [plan, saveImmediately, saveImmediatelyCloud]);

  // „É©„Éô„É´ÂâäÈô§ÊôÇ„ÅÆÂç≥Â∫ßÂêåÊúü„ÇíË®≠ÂÆö
  React.useEffect(() => {
    const { setOnLabelDeleted } = useLabelsStore.getState();
    
    setOnLabelDeleted((updatedLabels) => {
      if (import.meta.env.DEV) {
        console.log('üóëÔ∏è „É©„Éô„É´ÂâäÈô§Ê§úÁü•„ÄÅÂç≥Â∫ßÂêåÊúüÈñãÂßã:');
      }
      
      const currentPlan = usePlanStore.getState().plan;
      if (currentPlan) {
        const planToSave: TravelPlan = {
          ...currentPlan,
          labels: updatedLabels,
          updatedAt: new Date(),
        };
        usePlanStore.getState().setPlan(planToSave);
        saveImmediately(planToSave);
        saveImmediatelyCloud(planToSave);
      }
      
      syncDebugUtils.log('save', {
        type: 'immediate_sync',
        reason: 'label_deleted',
        timestamp: Date.now()
      });
    });
  }, [plan, saveImmediately, saveImmediatelyCloud]);

  // „Éó„É©„É≥Âêç„ÉªÊó•‰ªòÊõ¥Êñ∞ÊôÇ„ÅÆÂç≥Â∫ßÂêåÊúü„ÇíË®≠ÂÆö
  React.useEffect(() => {
    const { setOnPlanUpdated } = usePlanStore.getState();

    setOnPlanUpdated((updatedPlan) => {
      if (import.meta.env.DEV) {
        console.log('üìÖ „Éó„É©„É≥Êõ¥Êñ∞Ê§úÁü•„ÄÅÂç≥Â∫ßÂêåÊúüÈñãÂßã:', updatedPlan.name);
      }
      saveImmediately(updatedPlan);
      saveImmediatelyCloud(updatedPlan);
    });
  }, [saveImmediately, saveImmediatelyCloud]);

  // URLÂÖ±Êúâ„Åã„Çâ„ÅÆË™≠„ÅøËæº„Åø & „Éó„É©„É≥„É≠„Éº„Éâ
  // Ë™çË®ºÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Å¶„Åã„Çâ„Éó„É©„É≥„Çí„É≠„Éº„Éâ
  React.useEffect(() => {
    if (isInitializing) return; // Ë™çË®ºÂà§ÂÆöÂæÖ„Å°
    (async () => {
      const planFromUrl = loadPlanFromUrl();
      if (planFromUrl) {
        usePlacesStore.setState({ places: planFromUrl.places });
        useLabelsStore.setState({ labels: planFromUrl.labels });
        usePlanStore.getState().setPlan(planFromUrl);
        return;
      }

      const current = usePlanStore.getState().plan;
      if (current) return;

      // cloud or local load
      let loaded: TravelPlan | null = null;
      if (navigator.onLine && user) {
        loaded = await loadActivePlanHybrid({ mode: 'cloud', uid: user.uid });
      }
      if (!loaded) {
        loaded = getActivePlan() || createEmptyPlan();
      }

      if (loaded) {
        usePlanStore.getState().setPlan(loaded);
        // ËøΩÂä†: „Çπ„Éà„Ç¢„Å∏Âú∞ÁÇπ„Å®„É©„Éô„É´„ÇíÂêåÊúü
        usePlacesStore.setState({ places: loaded.places });
        useLabelsStore.setState({ labels: loaded.labels });
        setActivePlan(loaded.id);
      }
    })();
  }, [user, isInitializing]);

  // „É™„Ç¢„É´„Çø„Ç§„É†„É™„Çπ„Éä„Éº
  // Ë™çË®ºÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Å¶„Åã„Çâ„É™„Ç¢„É´„Çø„Ç§„É†„É™„Çπ„Éä„Éº„ÇíÁôªÈå≤
  React.useEffect(() => {
    if (isInitializing) return;
    if (!user) return;
    const plan = usePlanStore.getState().plan;
    if (!plan) return;

    let unsub: () => void;
    let lastProcessedTimestamp = 0; // ÊúÄÂæå„Å´Âá¶ÁêÜ„Åó„Åü„Çø„Ç§„É†„Çπ„Çø„É≥„Éó
    let processingTimeout: ReturnType<typeof setTimeout> | null = null;

    (async () => {
      const { listenPlan } = await import('./services/planCloudService');
      const { createSyncConflictResolver } = await import('./services/syncConflictResolver');
      
      const conflictResolver = createSyncConflictResolver();
      
      unsub = listenPlan(user.uid, plan.id, (updated) => {
        const remoteTimestamp = updated.updatedAt.getTime();
        // ÁèæÂú®„ÅÆ„ÇØ„É©„Ç¶„Éâ‰øùÂ≠ò„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíÂèñÂæó
        const currentCloudSaveTimestamp = lastCloudSaveTimestamp || 0;
        const timeDiff = Math.abs(remoteTimestamp - currentCloudSaveTimestamp);
        const isSelfUpdate = timeDiff < 3000; // 3Áßí‰ª•ÂÜÖ„ÇíËá™Â∑±Êõ¥Êñ∞„Å®„Åó„Å¶Âà§ÂÆöÔºàÂª∂Èï∑Ôºâ

        // Âêå„Åò„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅÆÊõ¥Êñ∞„ÅØÁÑ°Ë¶ñÔºà„Åü„Å†„Åó„ÄÅÂàùÂõû„ÅØÂá¶ÁêÜ„Åô„ÇãÔºâ
        if (remoteTimestamp === lastProcessedTimestamp && lastProcessedTimestamp !== 0) {
          if (import.meta.env.DEV) {
            console.log('üîÑ Âêå„Åò„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅÆ„Åü„ÇÅÁÑ°Ë¶ñ:', remoteTimestamp);
          }
          return;
        }

        // ÈñãÁô∫ÊôÇ„ÅÆ„ÅøË©≥Á¥∞„É≠„Ç∞
        if (import.meta.env.DEV) {
          console.log('üîÑ FirebaseÊõ¥Êñ∞„ÇíÂèó‰ø°:', {
            remoteTimestamp,
            currentCloudSaveTimestamp,
            timeDiff,
            isSelfUpdate,
            remotePlaces: updated.places.length,
            remoteLabels: updated.labels.length,
            localPlaces: usePlanStore.getState().plan?.places.length || 0,
            localLabels: usePlanStore.getState().plan?.labels.length || 0,
            lastCloudSaveTimestampValue: lastCloudSaveTimestamp,
            cloudSaveTimestampRef: 'N/A' // „Éï„ÉÉ„ÇØÂÜÖ„ÅÆÂÄ§„ÅØÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Å™„ÅÑ
          });
        }

        // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíË®òÈå≤
        if (isSelfUpdate) {
          syncDebugUtils.log('ignore', {
            reason: 'Ëá™Â∑±Êõ¥Êñ∞',
            remoteTimestamp,
            cloudSaveTimestamp: currentCloudSaveTimestamp,
            timeDiff
          });
          if (import.meta.env.DEV) {
            console.log('üîÑ Ëá™Â∑±Êõ¥Êñ∞„ÅÆ„Åü„ÇÅÁÑ°Ë¶ñ');
          }
          return;
        }

        // ‰ªñ„Éá„Éê„Ç§„Çπ„Åã„Çâ„ÅÆÊõ¥Êñ∞„Å®„Åó„Å¶Ë®òÈå≤
        syncDebugUtils.log('receive', {
          remoteTimestamp,
          cloudSaveTimestamp: currentCloudSaveTimestamp,
          timeDiff,
          remotePlaces: updated.places.length,
          remoteLabels: updated.labels.length
        });

        // Âá¶ÁêÜ‰∏≠„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Çí„ÇØ„É™„Ç¢
        if (processingTimeout) {
          clearTimeout(processingTimeout);
        }

        // „É™„É¢„Éº„ÉàÊõ¥Êñ∞‰∏≠„Éï„É©„Ç∞„ÇíË®≠ÂÆö
        setIsRemoteUpdateInProgress(true);

        // Âá¶ÁêÜ„ÇíÈÅÖÂª∂„Åï„Åõ„Å¶ÈÄ£Á∂öÊõ¥Êñ∞„Çí„Éê„ÉÉ„ÉÅÂá¶ÁêÜ
        processingTimeout = setTimeout(() => {
          try {
            // Á´∂ÂêàËß£Ê±∫„ÇíÂÆüË°å
            const currentPlan = usePlanStore.getState().plan;
            if (currentPlan) {
              const resolvedPlan = conflictResolver.resolveConflict(
                currentPlan,
                updated,
                currentPlan.updatedAt,
                updated.updatedAt
              );
              
              if (import.meta.env.DEV) {
                console.log('üîÑ Á´∂ÂêàËß£Ê±∫ÂÆå‰∫Ü:', {
                  originalPlaces: currentPlan.places.length,
                  remotePlaces: updated.places.length,
                  resolvedPlaces: resolvedPlan.places.length,
                  originalLabels: currentPlan.labels.length,
                  remoteLabels: updated.labels.length,
                  resolvedLabels: resolvedPlan.labels.length,
                  hasChanges: JSON.stringify(currentPlan) !== JSON.stringify(resolvedPlan)
                });
              }

              // Á´∂ÂêàËß£Ê±∫„É≠„Ç∞„ÇíË®òÈå≤
              syncDebugUtils.log('conflict', {
                originalPlaces: currentPlan.places.length,
                remotePlaces: updated.places.length,
                resolvedPlaces: resolvedPlan.places.length,
                originalLabels: currentPlan.labels.length,
                remoteLabels: updated.labels.length,
                resolvedLabels: resolvedPlan.labels.length,
                hasChanges: JSON.stringify(currentPlan) !== JSON.stringify(resolvedPlan)
              });
              
              // Ëß£Ê±∫„Åï„Çå„Åü„Éó„É©„É≥„Çí„Çπ„Éà„Ç¢„Å´ÂèçÊò†
              // Á´∂ÂêàËß£Ê±∫Âæå„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅØÊõ¥Êñ∞„Åó„Å™„ÅÑÔºàÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢Ôºâ
              usePlanStore.getState().setPlan(resolvedPlan);
              usePlacesStore.setState({ places: resolvedPlan.places });
              useLabelsStore.setState({ labels: resolvedPlan.labels });
            } else {
              // „É≠„Éº„Ç´„É´„Éó„É©„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„É™„É¢„Éº„Éà„ÇíÊé°Áî®
              usePlanStore.getState().setPlan(updated);
              usePlacesStore.setState({ places: updated.places });
              useLabelsStore.setState({ labels: updated.labels });
            }

            lastProcessedTimestamp = remoteTimestamp;
          } finally {
            // „É™„É¢„Éº„ÉàÊõ¥Êñ∞‰∏≠„Éï„É©„Ç∞„ÇíËß£Èô§ÔºàÈÅÖÂª∂„ÇíÁü≠Á∏ÆÔºâ
            setTimeout(() => {
              setIsRemoteUpdateInProgress(false);
              if (import.meta.env.DEV) {
                console.log('üîÑ „É™„É¢„Éº„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü„ÄÅËá™Âãï‰øùÂ≠ò„ÇíÂÜçÈñã');
              }
            }, 300); // 200ms„Åã„Çâ300ms„Å´Âª∂Èï∑
          }
        }, 100); // 100msÈÅÖÂª∂„Åß„Éê„ÉÉ„ÉÅÂá¶ÁêÜ

      });
    })();

    return () => {
      if (unsub) unsub();
      if (processingTimeout) {
        clearTimeout(processingTimeout);
      }
    };
  }, [user, planId, isInitializing, lastCloudSaveTimestamp]);

  return (
    <LoadScript googleMapsApiKey={apiKey} language="ja" region="JP" libraries={LIBRARIES}>
      {/* Navigation */}
      <TabNavigationWrapper 
        activeTab={activeTab}
        onTabChange={setActiveTab}
        labelMode={labelMode}
        onLabelModeToggle={handleLabelModeToggle}
      />



      {/* „É´„Éº„ÉàÊ§úÁ¥¢ÁîªÈù¢„Åæ„Åü„ÅØ„É™„Çπ„Éà„Çø„Éñ„Åß„ÅØÊ§úÁ¥¢„Éê„Éº„ÇíÈùûË°®Á§∫ */}
      {!isRouteSearchOpen && activeTab !== 'list' && (
        <SearchBar
          onPlaceSelected={handlePlaceSelected}
          isDesktop={isDesktop}
          inputRef={searchRef}
          onClearExternal={() => {}}
        />
      )}
      <PlaceDetailPanel />
      
      {/* Âú∞ÁÇπÈÅ∏Êäû‰∏≠„ÅÆ„Éê„Éä„Éº */}
      <SelectionBanner />
      
      <Map 
        showLabelToggle={false} 
        labelMode={labelMode}
        onLabelModeChange={setLabelMode}
      />
      
      {/* „É™„Çπ„ÉàË°®Á§∫„Çø„Éñ */}
      {activeTab === 'list' && <PlaceList />}
      
      
      
      {/* „É´„Éº„ÉàÊ§úÁ¥¢„Éë„Éç„É´ */}
      <RouteSearchPanel 
        isOpen={isRouteSearchOpen} 
        onClose={closeRouteSearch}
        selectedOrigin={selectedOrigin || undefined}
        selectedDestination={selectedDestination || undefined}
      />

      {activeTab === 'travelTime' && <TravelTimeControls />}

      {/* „Éó„É©„É≥ÂêçË°®Á§∫ */}
      <PlanNameDisplay activeTab={activeTab} />

      {/* „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´ */}
      <Tutorial 
        isOpen={showTutorial} 
        onClose={handleTutorialClose} 
      />

      {/* „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà */}
      <KeyboardShortcuts 
        isOpen={showKeyboardShortcuts} 
        onClose={() => setShowKeyboardShortcuts(false)} 
      />

      {/* „ÇØ„É©„Ç¶„ÉâÂêåÊúü„Ç§„É≥„Ç∏„Ç±„Éº„Çø */}
      <SyncStatusIndicator onSave={updateLastSavedTimestamp} />

      
    </LoadScript>
  );
}

export default App; 