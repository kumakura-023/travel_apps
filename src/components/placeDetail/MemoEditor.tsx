import React, { useState, useCallback, useRef } from 'react';
import { Place } from '../../types';
import { SyncOperationType } from '../../types/SyncTypes';

interface Props {
  saved: boolean;
  savedPlace?: Place;
  isMobile: boolean;
  updatePlace: (id: string, update: Partial<Place>) => void;
  onMemoChange?: (id: string, memo: string, operationType: SyncOperationType, isEditing?: boolean) => void;
}

export default function MemoEditor({ saved, savedPlace, isMobile, updatePlace, onMemoChange }: Props) {
  const [editing, setEditing] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const lastSavedValueRef = useRef<string>(savedPlace?.memo || '');

  // „É°„É¢„ÅÆÂÄ§„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜÔºàÂêåÊúü„Å™„Åó„ÄÅ„É≠„Éº„Ç´„É´Êõ¥Êñ∞„ÅÆ„ÅøÔºâ
  const handleMemoChange = useCallback((id: string, memo: string) => {
    // Âç≥Â∫ß„Å´„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞ÔºàUIÂøúÁ≠îÊÄßÁ∂≠ÊåÅÔºâ
    updatePlace(id, { memo });
  }, [updatePlace]);

  // „É°„É¢Á∑®ÈõÜ„ÅåÂÆå‰∫Ü„Åó„ÅüÊôÇ„ÅÆÂá¶ÁêÜÔºà„Éï„Ç©„Éº„Ç´„Çπ„Ç¢„Ç¶„ÉàÊôÇÔºâ
  const handleMemoBlur = useCallback((id: string, memo: string) => {
    setIsEditing(false);
    
    // ÂÄ§„ÅåÂÆüÈöõ„Å´Â§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„ÅøÂêåÊúü„ÇíÂÆüË°å
    if (memo !== lastSavedValueRef.current && onMemoChange) {
      if (import.meta.env.DEV) {
        console.log(`üìù „É°„É¢„Ç®„Éá„Ç£„Çø„Éº: Á∑®ÈõÜÂÆå‰∫Ü„ÄÅÂêåÊúüÂÆüË°å`, {
          oldValue: lastSavedValueRef.current,
          newValue: memo,
          timestamp: new Date().toLocaleTimeString()
        });
      }
      lastSavedValueRef.current = memo;
      onMemoChange(id, memo, 'memo_updated', false);
    } else if (onMemoChange) {
      // ÂÄ§„ÅåÂ§âÊõ¥„Åï„Çå„Å¶„ÅÑ„Å™„Åè„Å¶„ÇÇÁ∑®ÈõÜÁµÇ‰∫Ü„ÇíÈÄöÁü•
      onMemoChange(id, memo, 'memo_updated', false);
    }
  }, [onMemoChange]);

  // Á∑®ÈõÜÈñãÂßãÊôÇ„ÅÆÂá¶ÁêÜ
  const handleEditStart = useCallback(() => {
    setIsEditing(true);
    if (import.meta.env.DEV) {
      console.log(`üìù „É°„É¢„Ç®„Éá„Ç£„Çø„Éº: Á∑®ÈõÜÈñãÂßã`, new Date().toLocaleTimeString());
    }
  }, []);

  // savedPlace„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„Å´ÊúÄÂæå„ÅÆ‰øùÂ≠òÂÄ§„ÇíÊõ¥Êñ∞
  React.useEffect(() => {
    lastSavedValueRef.current = savedPlace?.memo || '';
  }, [savedPlace?.memo]);

  if (!saved) return null;

  return (
    <div className="glass-effect rounded-xl p-4">
      <h3 className="headline font-semibold text-system-label mb-2">„É°„É¢</h3>
      {isMobile ? (
        <textarea
          className="w-full h-24 p-2 border rounded bg-white/50 dark:bg-black/20 border-system-separator/50 focus:ring-2 focus:ring-coral-500 transition-all duration-150"
          value={savedPlace?.memo || ''}
          onChange={(e) => {
            if (savedPlace) {
              handleMemoChange(savedPlace.id, e.target.value);
            }
          }}
          onFocus={handleEditStart}
          onBlur={(e) => {
            if (savedPlace) {
              handleMemoBlur(savedPlace.id, e.target.value);
            }
          }}
          placeholder="„É°„É¢„ÇíËøΩÂä†"
        />
      ) : editing ? (
        <textarea
          className="w-full h-24 p-2 border rounded bg-white/50 dark:bg-black/20 border-system-separator/50 focus:ring-2 focus:ring-coral-500 transition-all duration-150"
          value={savedPlace?.memo || ''}
          onChange={(e) => {
            if (savedPlace) {
              handleMemoChange(savedPlace.id, e.target.value);
            }
          }}
          onFocus={handleEditStart}
          onBlur={(e) => {
            setEditing(false);
            if (savedPlace) {
              handleMemoBlur(savedPlace.id, e.target.value);
            }
          }}
          placeholder="„É°„É¢„ÇíËøΩÂä†"
          autoFocus
        />
      ) : (
        <div
          className="w-full min-h-[6rem] h-auto p-2 rounded cursor-pointer group"
          onDoubleClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            setEditing(true);
          }}
          title="„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Á∑®ÈõÜ"
        >
          <p className="body text-system-secondary-label leading-relaxed whitespace-pre-wrap group-hover:text-system-label transition-colors duration-150">
            {savedPlace?.memo ? (
              savedPlace.memo
            ) : (
              <span className="text-system-tertiary-label group-hover:text-system-secondary-label">„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„É°„É¢„ÇíÁ∑®ÈõÜ</span>
            )}
          </p>
        </div>
      )}
    </div>
  );
}
