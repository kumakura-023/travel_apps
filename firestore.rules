rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // 共通ヘルパー関数
    // ========================================
    
    // 認証されたユーザーのみアクセス可能
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // メールアドレスが検証済みか確認（Google認証は常に検証済み）
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }
    
    // 有効な認証（認証済み + メール検証済み）
    function isValidAuth() {
      return isAuthenticated() && isEmailVerified();
    }
    
    // ユーザーが指定されたuidと一致するか確認
    function isUser(userId) {
      return isValidAuth() && request.auth.uid == userId;
    }
    
    // ========================================
    // プラン関連のヘルパー関数
    // ========================================
    
    // プランのオーナーかどうか確認
    function isPlanOwner(planData) {
      return isValidAuth() && 
        planData.ownerId == request.auth.uid;
    }
    
    // プランのメンバーかどうか確認（members オブジェクトまたはmemberIds配列に存在）
    function isPlanMember(planData) {
      return isValidAuth() && (
        (request.auth.uid in planData.members &&
         planData.members[request.auth.uid] != null) ||
        ('memberIds' in planData && 
         planData.memberIds is list &&
         request.auth.uid in planData.memberIds)
      );
    }
    
    // プランの編集権限があるか確認（オーナーまたはエディター）
    function canEditPlan(planData) {
      return isValidAuth() && (
        isPlanOwner(planData) ||
        (isPlanMember(planData) && 
         planData.members[request.auth.uid].role in ['owner', 'editor'])
      );
    }
    
    // プランの閲覧権限があるか確認（全メンバー）
    function canViewPlan(planData) {
      return isValidAuth() && (
        isPlanOwner(planData) || 
        isPlanMember(planData)
      );
    }
    
    // 招待によってメンバーに追加されようとしているか確認
    function isBeingInvited() {
      return isValidAuth() &&
        request.auth.uid in request.resource.data.members &&
        !(request.auth.uid in resource.data.members);
    }
    
    // ========================================
    // データ検証関数
    // ========================================
    
    // プランデータの必須フィールドを検証
    function hasRequiredPlanFields(data) {
      return data.keys().hasAll(['ownerId', 'members', 'payload', 'name']) &&
        data.ownerId is string &&
        data.members is map &&
        data.payload is string &&
        data.name is string &&
        // memberIdsがある場合は、membersと整合性が取れているかチェック
        (!('memberIds' in data) || (
          data.memberIds is list &&
          data.memberIds.toSet() == data.members.keys().toSet()
        ));
    }
    
    // ユーザーデータの必須フィールドを検証
    function hasValidUserFields(data) {
      return data.keys().hasOnly(['activePlanId', 'updatedAt', 'plans']) &&
        ('activePlanId' in data ? data.activePlanId is string || data.activePlanId == null : true) &&
        ('updatedAt' in data) &&
        ('plans' in data ? data.plans is list : true);
    }
    
    // タイムスタンプが適切に設定されているか確認
    function hasValidTimestamp(data) {
      return 'updatedAt' in data && 
        (data.updatedAt == request.time || 
         data.updatedAt is timestamp);
    }
    
    // ========================================
    // コレクションルール
    // ========================================
    
    // ユーザーコレクション
    match /users/{userId} {
      // 読み取り: 本人のみ
      allow read: if isUser(userId);
      
      // 作成: 本人のみ、適切なフィールドを持つ場合
      allow create: if isUser(userId) && 
        hasValidUserFields(request.resource.data) &&
        hasValidTimestamp(request.resource.data);
      
      // 更新: 本人のみ、適切なフィールドを持つ場合
      allow update: if isUser(userId) && 
        hasValidUserFields(request.resource.data) &&
        hasValidTimestamp(request.resource.data);
      
      // 削除: 不許可（ユーザーデータは保持）
      allow delete: if false;
    }
    
    // プランコレクション
    match /plans/{planId} {
      // リスト取得: 認証済みユーザー（クライアント側でフィルタリング）
      allow list: if isValidAuth();
      
      // 個別読み取り: プランのメンバーのみ
      allow get: if resource == null || canViewPlan(resource.data);
      
      // 作成: 認証済みユーザー、自身がオーナーかつメンバーに含まれる
      allow create: if isValidAuth() && 
        hasRequiredPlanFields(request.resource.data) &&
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.members &&
        request.resource.data.members[request.auth.uid].role == 'owner' &&
        hasValidTimestamp(request.resource.data);
      
      // 更新: 編集権限を持つユーザー、または招待を受けている場合
      allow update: if (canEditPlan(resource.data) || isBeingInvited()) &&
        hasRequiredPlanFields(request.resource.data) &&
        // オーナーは変更不可
        resource.data.ownerId == request.resource.data.ownerId &&
        // 自分自身をメンバーから削除不可（オーナー以外）
        (isPlanOwner(resource.data) || 
         request.auth.uid in request.resource.data.members) &&
        hasValidTimestamp(request.resource.data);
      
      // 削除: オーナーのみ
      allow delete: if isPlanOwner(resource.data);
    }
    
    // 招待関連（将来の実装用）
    match /invitations/{inviteId} {
      // 読み取り: 認証済みユーザー（招待リンクを知っている場合）
      allow read: if isValidAuth();
      
      // 作成: プランの編集権限を持つユーザー
      allow create: if isValidAuth() && 
        'planId' in request.resource.data &&
        'createdBy' in request.resource.data &&
        'createdAt' in request.resource.data &&
        'expiresAt' in request.resource.data &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        // 有効期限は作成時から30日以内
        request.resource.data.expiresAt <= request.time + duration.value(30, 'd') &&
        canEditPlan(get(/databases/$(database)/documents/plans/$(request.resource.data.planId)).data);
      
      // 更新: 作成者のみ、使用済みフラグの設定のみ許可
      allow update: if isValidAuth() && 
        resource.data.createdBy == request.auth.uid &&
        request.resource.data.keys().hasOnly(['planId', 'createdBy', 'createdAt', 'expiresAt', 'usedAt', 'usedBy']) &&
        // 既存のフィールドは変更不可
        resource.data.planId == request.resource.data.planId &&
        resource.data.createdBy == request.resource.data.createdBy &&
        resource.data.createdAt == request.resource.data.createdAt &&
        resource.data.expiresAt == request.resource.data.expiresAt;
      
      // 削除: 作成者のみ
      allow delete: if isValidAuth() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    // その他のコレクションへのアクセスを明示的に拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}